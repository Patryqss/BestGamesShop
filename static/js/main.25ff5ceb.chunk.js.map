{"version":3,"sources":["actions/cartActions.js","actions/types.js","components/products/item.jsx","components/products/index.jsx","actions/productAction.js","components/cart/index.jsx","App.js","serviceWorker.js","reducers/productReducer.js","reducers/index.js","reducers/cartReducer.js","store.js","index.js"],"names":["addToCart","itemsInCart","itemToAdd","dispatch","cartItems","slice","checkItem","forEach","item","id","quantity","push","type","payload","props","data","className","title","alt","src","cover","availability","price","currency","Products","this","fetchProducts","products","map","key","onClick","Component","connect","state","items","cart","fetchedData","x","Cart","length","i","e","removeFromCart","Math","round","reduce","a","c","itemToRemove","removeItem","filter","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","combineReducers","action","createStore","allReducers","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.25ff5ceb.chunk.js","sourcesContent":["import { ADD_TO_CART, REMOVE_FROM_CART } from './types';\r\n\r\nexport const addToCart = (itemsInCart, itemToAdd) => dispatch => {\r\n  const cartItems = itemsInCart.slice();\r\n  let checkItem = false; //To check if the product is new or already in the cart\r\n  cartItems.forEach(item => {\r\n    if (item.id === itemToAdd.id) {\r\n      checkItem = true;\r\n      item.quantity++;\r\n    }\r\n  });\r\n  if (!checkItem) {\r\n    cartItems.push({ ...itemToAdd, quantity: 1 });\r\n  }\r\n  dispatch({ type: ADD_TO_CART, payload: { cartItems } });\r\n};\r\n\r\nexport const removeFromCart = (itemsInCart, itemToRemove) => dispatch => {\r\n  let cartItems = itemsInCart.slice();\r\n  let removeItem = false; //To check if more than 1 product is in the cart\r\n  cartItems.forEach(item => {\r\n    if (item.id === itemToRemove.id && item.quantity > 1) {\r\n      item.quantity--;\r\n    } else if (item.id === itemToRemove.id && item.quantity === 1) {\r\n      removeItem = true;\r\n    }\r\n  });\r\n  if (!removeItem) dispatch({ type: REMOVE_FROM_CART, payload: { cartItems } });\r\n  else {\r\n    cartItems = itemsInCart.slice().filter(x => x.id !== itemToRemove.id);\r\n    dispatch({ type: REMOVE_FROM_CART, payload: { cartItems } });\r\n  }\r\n};\r\n","export const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\n","import React from 'react';\r\n\r\nexport default function item(props) {\r\n  const data = props.data;\r\n  return (\r\n    <div>\r\n      <p className=\"title\">{data.title}</p>\r\n      <img alt={data.title} src={data.cover} />\r\n      {!data.availability && <p className=\"italic red\">Not available</p>}\r\n      {data.availability && (\r\n        <p className=\"italic\">\r\n          Get it for {data.price} {data.currency}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchProducts } from '../../actions/productAction';\r\nimport { addToCart } from '../../actions/cartActions';\r\n\r\nimport Item from './item';\r\n\r\nclass Products extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchProducts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"products section\">\r\n        <p className=\"productsTitle\">OUR PRODUCTS</p>\r\n        {this.props.products.map(item => (\r\n          <div className=\"itemGroup\" key={item.id}>\r\n            <Item data={item} />\r\n            {item.availability && (\r\n              <div className=\"button\" onClick={() => this.props.addToCart(this.props.cartItems, item)}>\r\n                Add to Cart\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  products: state.products.items,\r\n  cartItems: state.cart.itemsInCart,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchProducts, addToCart },\r\n)(Products);\r\n","import { FETCH_PRODUCTS } from './types';\r\nimport data from '../items.json';\r\n\r\nexport const fetchProducts = () => dispatch => {\r\n  let fetchedData = [];\r\n  data.map(x => fetchedData.push(x));\r\n  return dispatch({ type: FETCH_PRODUCTS, payload: fetchedData });\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addToCart, removeFromCart } from '../../actions/cartActions';\r\n\r\nclass Cart extends Component {\r\n  render() {\r\n    const { cartItems } = this.props;\r\n    return (\r\n      <div className=\"cart section\">\r\n        <p className=\"cartTitle\">CART</p>\r\n        <p className=\"cartEmpty\">{cartItems.length === 0 && 'Your cart is empty.'}</p>\r\n        {cartItems.length > 0 && (\r\n          <>\r\n            <div className=\"cartItemsList\">\r\n              {cartItems.map(i => (\r\n                <div key={i.id} className=\"cartItem\">\r\n                  <img className=\"cartItemImg\" src={i.cover} alt={i.title} />\r\n                  <p className=\"cartItemTitle\">{i.title}</p>\r\n                  <div className=\"button xButton\" onClick={e => this.props.removeFromCart(this.props.cartItems, i)}>\r\n                    X\r\n                  </div>\r\n                  <p className=\"cartItemCost\">\r\n                    {i.quantity}x {i.price} {i.currency} = {Math.round(i.quantity * i.price * 100) / 100} {i.currency}\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <p className=\"cartTotalSum\">\r\n              Total sum: {Math.round(cartItems.reduce((a, c) => a + c.price * c.quantity, 0) * 100) / 100} PLN\r\n            </p>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  cartItems: state.cart.itemsInCart,\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { addToCart, removeFromCart },\r\n)(Cart);\r\n","import React, { Component } from 'react';\nimport './styles/App.scss';\n\nimport Products from './components/products';\nimport Cart from './components/cart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Best Games Shop</h1>\n        <div className=\"shop\">\n          <Products />\n          <Cart />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_PRODUCTS } from '../actions/types';\r\n\r\nconst initialState = { items: [] };\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_PRODUCTS:\r\n      return { ...state, items: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport productReducer from './productReducer';\r\nimport cartReducer from './cartReducer';\r\n\r\nexport default combineReducers({\r\n  products: productReducer,\r\n  cart: cartReducer,\r\n});\r\n","import { ADD_TO_CART, REMOVE_FROM_CART } from '../actions/types';\r\n\r\n// const initialState = { itemsInCart: [] };\r\nexport default function(state = {}, action) {\r\n  switch (action.type) {\r\n    case ADD_TO_CART:\r\n      return { itemsInCart: action.payload.cartItems };\r\n    case REMOVE_FROM_CART:\r\n      return { itemsInCart: action.payload.cartItems };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport allReducers from './reducers';\r\n\r\nconst initialState = { cart: { itemsInCart: [] } };\r\nexport default createStore(allReducers, initialState, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}